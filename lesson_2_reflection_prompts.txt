What happens when you initialize a repository? Why do you need to do it?

- A bunch of metadata is created to keep track of the files in our repository
- I need to start a repository to start versioning my files and keep control of the changes



How is the staging area different from the working directory and the repository? What value do you think it offers?

- The staging area is a intermediate area
	- Directory has all the files
	- And the repository have the commits
- Staging give us more control for commit
	- I can add just some files that I want to be in the commit



How can you use the staging area to make sure you have one commit per logical change?

- We can use 'git diff' and 'git diff --staged' to see what changes we made
- Knowing what changes we made we can be sure of what is new
- With that we can be sure if what was added is related to a logical change



What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- In cases when I would develop a new experimental function that I'm not sure how it will work
- The branch will allow me to have to stable version of my code in one branch, and the experimental stuffs in another branch



How do the diagrams help you visualize the branch structure?

- The diagram shows the commit history
- With this history we can trace back to see at what point a branch was created
- And with that we can see the reachability of each branch



What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

- The result of merging will a new commit
- If a common file have different changes between the branches, the files will be combine to a single file containing all the changes
- The parent of the merge commit will the commits of all branches merged



What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

- Automatic merging is an easy way to commit
	- If there's no conflicts, the automatic merge makes our job more easy
- Manual merge are require when there're conflicts
	- Git can figure which code is the right one